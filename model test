import time
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as viz_utils
import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'    # Suppress TensorFlow logging (1)
import pathlib
import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')   # Suppress Matplotlib warnings



gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
    tf.config.experimental.set_memory_growth(gpu, True)

PATH_TO_SAVED_MODEL = "C:\\Users\\danie\\OneDrive\\Documents\\Tensorflow\\workspace\\training_demo\\exported-models\\my_new_model\\saved_model"

print('Loading model...', end='')
start_time = time.time()

# Load saved model and build the detection function
detect_fn = tf.saved_model.load(PATH_TO_SAVED_MODEL)

end_time = time.time()
elapsed_time = end_time - start_time
print('Done! Took {} seconds'.format(elapsed_time))

# Load label map data for plotting
PATH_TO_LABELS = "C:\\Users\\danie\\OneDrive\\Documents\\Tensorflow\\workspace\\training_demo\\annotations\\train_tfrecords\\redcup_label_map.pbtxt"
category_index = label_map_util.create_category_index_from_labelmap(PATH_TO_LABELS,
                                                                    use_display_name=True)


# loads an image, runs it through the detection model and visualizes the detection results, including the keypoints 

def download_images():
    base_dir = "C:\\Users\\danie\\OneDrive\\Documents\\Tensorflow\\workspace\\training_demo\\images\\test\\"
    files = ["red plastic cup pictures party163.jpg",
    "red plastic cup pictures party164.jpg",
	"red plastic cup pictures party165.jpg",
	"red plastic cup pictures party169.jpg",
	"red plastic cup pictures party170.jpg",
	"red plastic cup pictures party172.jpg",
	"red plastic cup pictures party173.jpg",
	"red plastic cup pictures party176.jpg",
	"red plastic cup pictures party178.jpg",
	"red plastic cup pictures party183.jpg",
	"red plastic cup pictures party184.jpg",
	"red plastic cup pictures party185.jpg",
	]
    image_paths = []
    for filename in files:
        image_path = base_dir + filename
        image_paths.append(str(image_path))
    return image_paths

IMAGE_PATHS = download_images()

def load_image_into_numpy_array(path):
    """Load an image from file into a numpy array.

    Puts image into numpy array to feed into tensorflow graph.
    Note that by convention we put it into a numpy array with shape
    (height, width, channels), where channels=3 for RGB.

    Args:
      path: the file path to the image

    Returns:
      uint8 numpy array with shape (img_height, img_width, 3)
    """
    return np.array(Image.open(path))


for image_path in IMAGE_PATHS:

    print('Running inference for {}... '.format(image_path), end='')

    image_np = load_image_into_numpy_array(image_path)

    # Things to try:
    # Flip horizontally
    # image_np = np.fliplr(image_np).copy()

    # Convert image to grayscale
    # image_np = np.tile(
    #     np.mean(image_np, 2, keepdims=True), (1, 1, 3)).astype(np.uint8)

    # The input needs to be a tensor, convert it using `tf.convert_to_tensor`.
    input_tensor = tf.convert_to_tensor(image_np)
    # The model expects a batch of images, so add an axis with `tf.newaxis`.
    input_tensor = input_tensor[tf.newaxis, ...]

    # input_tensor = np.expand_dims(image_np, 0)
    detections = detect_fn(input_tensor)

    # All outputs are batches tensors.
    # Convert to numpy arrays, and take index [0] to remove the batch dimension.
    # We're only interested in the first num_detections.
    num_detections = int(detections.pop('num_detections'))
    detections = {key: value[0, :num_detections].numpy()
                   for key, value in detections.items()}
    detections['num_detections'] = num_detections

    # detection_classes should be ints.
    detections['detection_classes'] = detections['detection_classes'].astype(np.int64)

    image_np_with_detections = image_np.copy()

    viz_utils.visualize_boxes_and_labels_on_image_array(
          image_np_with_detections,
          detections['detection_boxes'],
          detections['detection_classes'],
          detections['detection_scores'],
          category_index,
          use_normalized_coordinates=True,
          max_boxes_to_draw=200,
          min_score_thresh=.30,
          agnostic_mode=False)


    plt.figure()
    plt.imshow(image_np_with_detections)
    print('Done')
plt.show()

# sphinx_gallery_thumbnail_number = 2
